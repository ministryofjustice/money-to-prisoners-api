# Generated by Django 2.0.13 on 2020-05-13 14:45
import logging

from django.db import migrations
from django.db.models.aggregates import Max
from django.db.models import Q, BooleanField, ExpressionWrapper


logger = logging.getLogger('mtp')


def populate_initial_credit_profile_total_values(apps, schema_editor):
    credit = apps.get_model('credit', 'Credit')

    batch_size = 5000
    last_id = credit.objects.aggregate(Max('id'))['id__max'] or 0
    logger.info('Highest value of credit.id is %s', last_id)
    range_start = 0
    for range_end in range(batch_size, last_id + batch_size, batch_size):
        credit.objects.filter(
            id__gte=range_start,
            id__lt=range_end
        ).update(
            is_counted_in_sender_profile_total=ExpressionWrapper(
                Q(sender_profile_id__isnull=False),
                output_field=BooleanField()

            ),
            is_counted_in_prisoner_profile_total=ExpressionWrapper(
                Q(prisoner_profile_id__isnull=False),
                output_field=BooleanField()
            )
        )
        logger.info('Updated is_counted_in_*_profile_total for %s <= credit.id < %s', range_start, range_end)
        range_start = range_end


def reset_is_counted_in_profile(apps, schema_editor):
    credit = apps.get_model('credit', 'Credit')

    batch_size = 5000
    last_id = credit.objects.aggregate(Max('id'))['id__max']
    logger.info('Highest value of credit.id is %s', last_id)
    range_start = 0
    for range_end in range(batch_size, last_id + batch_size, batch_size):
        credit.objects.filter(
            id__gte=range_start,
            id__lt=range_end
        ).update(
            is_counted_in_sender_profile_total=False
        )
        credit.objects.filter(
            id__gte=range_start,
            id__lt=range_end
        ).update(
            is_counted_in_prisoner_profile_total=False
        )
        logger.info('Reset is_counted_in_*_profile_total for %s <= credit.id < %s', range_start, range_end)
        range_start = range_end


class Migration(migrations.Migration):

    dependencies = [
        ('credit', '0036_credit_is_counted_in_prisoner_profile_total'),
    ]

    operations = [
        migrations.RunPython(populate_initial_credit_profile_total_values, reverse_code=reset_is_counted_in_profile),
    ]
